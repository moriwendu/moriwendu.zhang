    tomcat 由 java语言延伸过来的   

        编程语言：
            系统级：C , C++ , go , erlang
            应用级: C# , Java , Python , Perl , Ruby , php
                虚拟机： jvm , pvm
                动态网站： asp , .net , jsp 

            动态网站：
                客户端动态： 
                服务器动态：
                    CGI: 通用网关接口   

                webapp server:
                    jsp: tomcat , jboss , jetty
                    php: php-fpm 

            Java编程语言：
                sun公司研发    
                1995: Write Once , Run Anywhere     (一次编写到处执行)
                1996: JDK (Java Development Kit),包含了一个JVM (Sun Classic VM)
                    JDK 1.0 主要的融合技术: JVM , Applet , AWT
                    JDK 1.1               : JAR 文档格式、 JDBC 、 JavaBeans
                    JDK 1.2               : sun 把 Java技术分拆为三个方向。J2SE: Standard Edition  J2EE: Enterprise Edition  J2ME: Mobile Edition
                                            代表性技术：EJB , java Plug-in , Swing 
                                            JIT及时编译器: Just In Time
                    JDK 1.3               : 使用了HotSpot 虚拟机
                    JDK 1.4               : 
                
                编程语言的类别: 指令+数据
                    面向过程：以指令为中心，围绕指令组织数据；
                    面向对象：以数据为中心，围绕数据组织指令； 

                Java体系结构： （Java的API和Java虚拟机的组成表示Java ）
                    Java编程语言：
                    Java Class文件格式：
                    Java API:
                    Java VM:
                        JVM的核心组成部分：
                            Class Loader （类加载)
                            execution engine (执行引擎)

                            JVM运行流程：               --------------
                                                        | 方法区     |   --------------------
                                                        | 堆         |                       |
                                Class Loader  --->      | Java栈     |                       v
                                                        | PC寄存器   |  ---> 执行引擎 -----> 本地方法调用接口
                                                        | 本地方法栈 |
                                                        --------------
                            方法区：    线程共享，用于存储被虚拟加载的类信息、常量、静态变量等；永久代
                            堆：        Java堆是JVM所管理的内存中最大的一部分（这里主要包含了Java运行时面向的对象） 也是GC（垃圾回收）管理的主要区域
                                        主流的算法都基于分代收集方式进行，新生代和老年代；线程共享
                            Java栈：    线程私有，存放线程自己的局部变量等信息
                            PC寄存器：  线程独占的内存空间 Program Counter Register
                            本地方法栈：
                                  
                Java编程语言的特性：
                    面向对象、多线程、结构化错误处理、垃圾收集、动态链接、动态扩展

                三个技术流派：
                    J2SE    ---->    Java 2 SE
                    J2EE    ---->    Java 2 EE
                    J2ME    ---->    Java 2 ME

            JDK包括JRE：
                JRE仅仅是用来运行Java代码的，它不能让你去开发代码。   要开发需要使用JDK

            JAVA 2 EE ：
                包含了 JAVA 2 SE, servlet(服务连接器) , JSP , EJB , JMS , JMX , JavaMail

                Servlet Container 服务连接容器

                JSP: 可以理解为是servlet的前端。  能够让Java代码内嵌到html文档内
                
                APIs:
                    EJB: Enterprise JavaBeans Java相关的诸多高级功能的实现，对象/关系映射，跨越多个数据源的分布式事务等

                    JMS: Java Message Service 高性能异步消息服务，实现JAVA EE应用程序与非JAVA程序的“透明”通信。

                    JMX: Java Management Extensions 在程序运行时对其进行交互式监控和管理的机制

                    JTA：Java Transaction API 允许应用程序在自身的一个或多个组件中平滑地处理错误的机制

                    JavaMail: 通过工业标准的POP/SMTP/IMAP协议发送和接收邮件的机制：

                Java SE APIs:
                    JNDI : Java Naming and Directory Interface 用于与LDAP服务交互的API
                    JAXP : Java API for XML Processing 用于分析及转换XML（基于XSLT实现）
                    
                Web Container: web容器
                    JDK , Servlet , JSP

                    商业实现：
                        WebSphere 由IBM公司提供商业用途的JAVA 2 EE 所需要的所有类库的所有件
                        WebLogic  (Oracle收购了BEA公司的)
                        0c4j      (Oracle自己的)
                        Glassfish
                        Geronimo
                        JOnAS
                        JBoss

                    开源实现：
                        Tomcat
                        jetty
                        resin  

                    开源JDK：
                        apache Harmony,
                        OpenJDK等
                        Oracle JDK等（部份开源）   

            Tomcat 的核心组件：
                catalina: servlet container 服务连接容器
                Coyote:   http connection   
                jasper:   JSP Engine    JSP引擎

                Tomcat的开发语言：JAVA 

            Tomcat Instance: 运行中的tomcat进程（java进程）
                server: 即每一个server对应一个tomcat实例 
                service: service组件用于把Connector关联至engine组件；一个service只能包含一个engine组件和一个或多个connector组件
                Engine: Tomcat的核心组件，用于运行jsp或servlet代码
                Connector: 接收并解析用户请求，将请求映射为Engine中运行的代码，将运行的结果构建成响应报文，响应给客户端
                           一个connector只能适用于一个Engine,一个Engine里可以拥有多个connector
                    connector支持的哪些协议，如 ： http , ajp  
                Host: 类拟httpd中的虚拟主机
                Context: 类拟于httpd中的alias;但不完全一样。如果一个网站需要用到了JAVA类库中的组件，我们还要进行它的定义
                     memcache中有使用到，可以看下memcache的使用
                
                注意：每个组件由“类”来实现，有些组件的实现还不止一种
                    顶级类组件：server
                    服务类组件：service
                    容器类组件：可可以部署webapp的组件，engine它代表host , context
                    连接器组件：connector
                    被嵌套类组件：valve , logger , realm 等

                    <server>
                        <service>
                            <connector />
                            <connector />
                            ...
                            <engine>
                                <host>
                                    <context />
                                    ...
                                </host>
                                ...
                            </engine>
                        </service>
                    </server>

                Tomcat 的运行模式：
                    standalone: 通过内置的web server (http connector) 来接收客户端的请求
                    proxy     : 由专门的web server服务客户端的http请求：
                        in-process: 两组件部署于同一主机
                        network:    两组件部署于不同主机

                安装Tomcat:
                    官方站点： http://tomcat.apache.org

                    部署前需要下载的软件
                    JDK，（OpenJDK 或 Oracle JDK） 
                    tomcat 

                    Tomcat的目录结构：
                        bin    : 脚本及启动时用到的类
                        lib    : 类库
                        conf   : 配置文件
                        logs   : 日志文件
                        webapps: 应用程序默认部署目录
                        work   : 工作目录
                        temp   : 临时文件目录

                    配置文件：
                        server.xml ：主配置文件
                        context.xml: 每个webapp都可以有专用的配置文件，这些配置文件通常位于webapp应用程序目录下的WEB-INF目录中，用于
                                     定义会话管理器、JDBC等，conf/context.xml是为各webapp提供默认配置；
                        web.xml    : 每个webapp“部署”之后才能被访问，此文件则用于为所有的webapp提供默认的部团相关配置；                             
                        tomcat-users.xml：用户认证的账号和密码配置文件；
                        catalina.policy : 当使用-security先项启动tomcat实例时，会读取此配置文件来实现其安全运行策略；
                        catalina.properties: Java属性的定义文件，用于设定类加载器路径等，以及一些JVM性能相关的调优参数；
                        logging.properties : 日志相关的配置信息

                jsp  -->  jasper -->  servlet  -->  complie  -->  bytecodes  -->  jvm

                tomcat : JWS(Sun) + Jserv(ASF)

                tomcat : jdk + tomcat

                Java WebAPP 组织结构：
                    有特定的组织形式、层次型的目录结构：主要包含了servlet 代码文件、jsp页面文件、类文件、部署描述符文件等；
                        /usr/local/tomcat/webapps/app1/
                            /: webapp的根目录；
                            WEB-INF : 当前webapp的私有资源目录，通常存放当前webapp自用的web.xml;
                            META-INF：当前webapp的私有资源目录，通常存放当前webapp自用的context.xml;
                            classes/: 此webapp的私有类；
                            lib/    : 此webapp的私有类，被打包为jar格式类；
                            index.jsp: webapp的主页

                        webapp归档格式：
                            .war: webapp
                            .jar: EJB的类文件 
                            .rar: 资源适配器
                            .ear: 企业级应用程序

                手动添加一个测试应用程序：
                    1、创建webapp特有的目录结构
                        mkdir myapp/{lib,classes,WEB-INF,META-INF} -pv  
                        #如果有需求到开发，不要在conf/目录下更改context.xml 和 web.xml配置文件，因为一改动影响的是全局的
                        可以把这两文件分别复制一份到之前创建的目录内cp context.xml META-INF  cp web.xml WEB-INF
                    2、提供webapp各文件
                       myapp/index.jsp
                             <%@ page language="java" %>
                            <%@ page import="java.util.*" %>
                            <html>
                                <head>
                                    <title>JSP Test Page</title>
                                </head>
                                <body>
                                       <% out.println("Hello,word."); %>
                                </body>
                            </html>   



                                                                
                    部署(deployment) webapp相关的操作：
                        deploy: 部署，将webapp的源文件旋转于目标目录、配置tomcat服务器能够基于context.xml文件中定义的路径来访问此webapp;
                        将其特有类通过class loader装载至tomcat;
                            有两种方式：
                                自动部署：auto deploy
                                手动部署：
                                    1、冷部署：把webapp复制到指定位置，而后才启动tomcat;
                                    2、热部署：在不停止tomcat的前提下进行的部署。
                                           部署工具，manager、ant脚本、tcd（tomcat client deployer)等
                        undeploy:反部署，停止webapp，并从tomcat实例拆除其部分文件和部署名；
                        stop：停止，不再向用户提供服务，但是这个应用程序类文件仍在java虚拟机上
                        start: 启动处于“停止”状态的webapp
                        redeploy: 重新部署；

                    tomcat自带的应用程序：
                        manager app: webapp管理工具
                        host manager: Virtual Hosts管理工具

                    tomcat的主配置文件结构 
                        <Server port="8005" shutdown="SHUTDOWN">    （shutdown 很危险，建意关掉 **使用telnet 192.168.3.1 8005  输入SHUTDOWN 然后服务就关掉了！）        
         
                        <Server>
                            <Service>
                                <connector/>
                                <connector/>
                                ...
                                <Engine>
                                    <Host>
                                        <Context/>
                                        <Context/>
                                        ...
                                    </Host>
                                    <Host>
                                        ...
                                    </Host>
                                    ...
                                </Engine>
                            </Service>
                        </Server>       

                            <Connector port="8080" protocol="HTTP/1.1"           连接器的端口是8080   协议是HTTP1.1
                                       connectionTimeout="20000"                 连接超时时间是20s
                                       redirectPort="8443" />                    当接收到HTTPS的请求时转到8443端口
                             <!--                           
                            <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"     由于 8443端口是关闭的，所以如果要用需要自己开启
                                       maxThreads="150" SSLEnabled="true">
                                <SSLHostConfig>
                                    <Certificate certificateKeystoreFile="conf/localhost-rsa.jks"
                                                 type="RSA" />
                                </SSLHostConfig>
                            </Connector>
                            -->
                            <!-- Define a SSL/TLS HTTP/1.1 Connector on port 8443 with HTTP/2
                                 This connector uses the APR/native implementation which always uses
                                 OpenSSL for TLS.
                                 Either JSSE or OpenSSL style configuration may be used. OpenSSL style
                                 configuration is used below.
                            -->
                            <!--
                            <Connector port="8443" protocol="org.apache.coyote.http11.Http11AprProtocol"
                                       maxThreads="150" SSLEnabled="true" >
                                <UpgradeProtocol className="org.apache.coyote.http2.Http2Protocol" />
                                <SSLHostConfig>
                                    <Certificate certificateKeyFile="conf/localhost-rsa-key.pem"
                                                 certificateFile="conf/localhost-rsa-cert.pem"
                                                 certificateChainFile="conf/localhost-rsa-chain.pem"
                                                 type="RSA" />
                                </SSLHostConfig>
                            </Connector>


                     <Connector port="8080" protocol="HTTP/1.1" 
                               connectionTimeout="20000"
                               redirectPort="8443" />
                    <!-- A "Connector" using the shared thread pool-->
                    <!--
                    <Connector executor="tomcatThreadPool"                 （这里定义tomcat线程池的，默认是关闭的，如果要使用需要打开）
                               port="8080" protocol="HTTP/1.1"
                               connectionTimeout="20000"
                               redirectPort="8443" />                           
                 
                        <Connector port="8009" protocol="AJP/1.3" redirectPort="8443" />

                        AJP：apache jserv protocol 二进制协议。 


                         <Engine name="Catalina" defaultHost="localhost">     当用户访问时，如果没有定义指定的路径，就会访问到defaulthost的虚拟主机上 
                               <Host name="localhost"  appBase="webapps"      appBase 是页面路径。    autuDeploy 是自动部署
                                  unpackWARs="true" autoDeploy="true">        unpackWARs : 表示如果是压缩文档是否自动解压缩，true表示为是

                                <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"  ---> AccessLogValve表示访问日志格式的
                                       prefix="localhost_access_log" suffix=".txt"
                                       pattern="%h %l %u %t &quot;%r&quot; %s %b" />

                    tomcat的两个管理应用:
                        manager
                        host-manager
                        
                    tomcat的常用组件配置：
                        
                        Server：代表tomcat instance，即表现出的一个java进程；监听在8005端口，只接收“SHUTDOWN”。各server监听的端口不能相同，因此，在同一物理主机启动多个实例时，需要修改其监听端口为不同的端口； 
                            建意把它关掉，或者 port="-1"
                                               shutdown="RANDOM_CHARCTER"
                        
                        Service：用于实现将一个或多个connector组件关联至一个engine组件；
                        
                        Connector组件：
                            负责接收请求，常见的有三类http/https/ajp；
                        
                            进入tomcat的请求可分为两类：
                                (1) standalone : 请求来自于客户端浏览器；
                                (2) 由其它的web server反代：来自前端的反代服务器；
                                    nginx --> http connector --> tomcat 
                                    httpd(proxy_http_module) --> http connector --> tomcat
                                    httpd(proxy_ajp_module) --> ajp connector --> tomcat 
                                    httpd(mod_jk) --> ajp connector --> tomcat 
                                    
                            属性：
                                port="8080" 
                                protocol="HTTP/1.1"
                                connectionTimeout="20000"
                                
                                address：监听的IP地址；默认为本机所有可用地址；
                                maxThreads：最大并发连接数，默认为200；
                                enableLookups：是否启用DNS查询功能；一般要关掉
                                acceptCount：等待队列的最大长度；
                                secure：
                                sslProtocol：
                                
                        Engine组件：Servlet实例，即servlet引擎，其内部可以一个或多个host组件来定义站点； 通常需要通过defaultHost来定义默认的虚拟主机；
                        
                            属性：
                                name=
                                defaultHost="localhost"
                                jvmRoute=
                                
                        Host组件：位于engine内部用于接收请求并进行相应处理的主机或虚拟主机，示例：
                             <Host name="localhost"  appBase="webapps"
                                unpackWARs="true" autoDeploy="true">
                            </Host>
                            
                            常用属性说明：
                                (1) appBase：此Host的webapps的默认存放目录，指存放非归档的web应用程序的目录或归档的WAR文件目录路径；可以使用基于$CATALINA_BASE变量所定义的路径的相对路径；
                                (2) autoDeploy：在Tomcat处于运行状态时，将某webapp放置于appBase所定义的目录中时，是否自动将其部署至tomcat；
                                
                                 示例：
                                  <Host name="tc1.magedu.com" appBase="/appdata/webapps" unpackWARs="true" autoDeploy="true">
                                </Host>
                                
                                # mkdir -pv /appdata/webapps
                                # mkdir -pv /appdata/webapps/ROOT/{lib,classes,WEB-INF}
                                提供一个测试页即可；
                                
                        Context组件:
                            示例：
                                <Context path="/PATH" docBase="/PATH/TO/SOMEDIR" reloadable=""/>
                                
                        综合示例：
                            <Host name="node1.magedu.com" appBase="/web/apps" unpackWARs="true" autoDeploy="true">
                                <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                                    prefix="node1_access" suffix=".log"
                                    pattern="%h %l %u %t &quot;%r&quot; %s %b" />
                                <Context path="/test" docBase="test" reloadable="">
                                    <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                                    prefix="node1_test_access_" suffix=".log"
                                    pattern="%h %l %u %t &quot;%r&quot; %s %b" />
                                </Context>
                            </Host>     
                                
                        Valve组件：
                            <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                                prefix="localhost_access_log" suffix=".txt"
                                pattern="%h %l %u %t &quot;%r&quot; %s %b" />
                                
                            Valve存在多种类型：
                                定义访问日志：org.apache.catalina.valves.AccessLogValve
                                定义访问控制：org.apache.catalina.valves.RemoteAddrValve 
                                
                                 <Valve className="org.apache.catalina.valves.RemoteAddrValve" deny="172\.16\.100\.67"/>                   
                    
                tomcat的常见的server.xml的连接器有四种
                    HTTP连接器
                    SSL连接器
                    AJP1.3连接器
                    proxy(JK）连接器     这款连接器不会在后端配置的，所以基本上是上面三种
                
            Connector 定义连接器时可以配置的属性非常多，但通常定义HTTP连接器时必须定义的属性只有"port"，定义AJP连接器时
                必须定义的属性只有"protocol" 因为默认的协议为HTTP。以下是常用属性的说明

                1) address           : 指定连接器监听的地址，默认为所有地址。
                2）maxThreads        : 支持最大并发连接数，默认为200
                3）prot              ：监听的端口
                4）protocol          : 连接器使用的协议，默认为HTTP/1.1，定义AJP协议时通常为AJP/1.3
                5) redirectPort      : 如果某连接器支持的协议是HTTP,当接收客户端发来的HTTPS请求时，则转发至此属性定义的端口
                6）connectionTimeout : 等待客户端发送请求的超时时间，单位为毫秒，默认为60000，即1分钟
                7）enableLookups     : 是否通过request.getRemoteHost()进行DNS查询以获取客户端的主机名：默认为true; （这项比较消耗资源，建议没有特别必要的话关闭它即 false )
                8) accptCount        : 设置等待队列的最大长度，通常在tomcat所有处理线程均处于繁忙状态时，新发来的请求将被放置于等待队列中；  
                9) minSpareThreads   : 最小空闲线程
               10) maxSpareThreads   : 最大空闲线程
               11）debug             : 等于0的时候表示关闭debug信息
               12）scheme            : 等于https的时候表示接收https请求
               13) secure            : 安全加密的连接  true 
               14) clientAuth        : 要不要验证客户端  --  这个千万别开    使用false
               15) sslProtocol       : 使用的ssl协议

            host 组件
                1）appBase           : 此Host的webapps目录，即存放非归档的web应用程序的目录或归档后的WAR文件的目录路径。可以使用相对路径
                2）autoDeploy        : 在Tomcat处于运行状态时放置于appBase目录中的应用程序文件是否自动进行deploy；默认是true
                3) unpackWars        ：在启用此webapps时是否对WAR格式的归档文件先进行展开；默认为true;
             
              虚拟主机示例： 
                <Engine name="Catalina" defaultHost="localhost">
                  <Host name="localhost" appBase="webapps">
                    <Context path="" docBase="ROOT" />
                    <Context path="/bbs" docBase="web/bbs"
                      reloadable="true" crossContext="true" />
                  </Host>
                  
                  <Host name="mail.magedu.com" appBase="/web/mail">
                    <Context path="/" docBase="ROOT"/>
                  </Host>
                </Engine>        

                主机别名定义：
                    如果一个主机有两个或两个以上的主机名，额外的名称均可以以别名的形式进行定义，如下
                        <Host name="www.magedu.com" appBase="webapps" unpackWARs="true">
                          <Alias>magedu.com</Alias>
                        </Host>  
            
            Context组件：
                Context在某些意义上类似于apache中的路径别名，一个Context定义用于标识tomcat实例中的一个web应用程序如下面定义
                    <!-- Tomcat Root Context  -->
                    <Context path="" docBase="/web/webapps"/>    path=""引号内什么都不写表示根路径，前面的URL映射到后面的路径

                    <!-- buzzin webapp  -->
                    <Context path="/bbs"
                      docBase="/web/threads/bbs"
                      reloadble="true"
                    </Context>  

                示例：  配置一名host
                      <Host name="web1.shui.com" appBase="/app/web1" unpackWARs="true" autoDeploy="true">
                        <Context path="" docBase="/app/web1" reloadble="true"/>
                        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="/app/logs"
                               prefix="web1_access_log" suffix=".txt"
                               pattern="%h %l %u %t &quot;%r&quot; %s %b" />
                      </Host>    
                
                ##注：path指定的路径不能以/线结尾 

            Realm组件：
                    一个Realm表示一个安全上下文，它是一个授权访问某个给定Context的用户列表和某用户所允许切换的角色相关定义的列表，因此，Realm就像是一个用户
                    和组相关的数据库，定义Realm时唯一必须要提供的属性是classname，它是Realm的多个不同实现，用于表示Realm认证的用户及角色等认证信息的存放位置。
                    JAASRealm         ：基于Java Authintication and Authorization service 实现用户认证
                    JDBCRealm         ：通过JDBC访问某关系型数据库表实现用户认证
                    JNDIRealm         ：基于JNDI使用目录服务实现认证信息的获取
                    MemoryRealm       ：查找tomcat-user.xml文件实现用户信息的获取
                    UserDatabaseRealm : 基于UserDatabase文件（通常是tomcat-user.xml)实现用户认证，它实现一个完全可更新和持久有效的MemoryRealm，因此能够跟标准的
                                        MemoryRealm兼容，它通过JNDI实现；
                        ##RemoteHostValve和RemoteAddrValve可以分别用来实现基于主机名称和基于IP地址的访问控制，控制本身可以通过allow或deny来进行定义，这有
                          点类似于Apache的访问控制功能。
                    
                    下面是一个常见的使用UserDatabase的配置：
                        <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
                         resourceName="UserDatabase"/>
                    下面是一个使用JDBC方式获取用户认证信息的配置：
                        <Realm className="org.apache.catalina.realm.JDBCRealm" debug="99"
                         driverName="org.gjt.mm.mysql.Driver"
                         connectionURL="jdbc:mysql://localhost/authority"
                         connectionName="test" connectionPassword="test"
                         userTable="users" userNameCol="user_name"
                         userCredCol="user_pass"
                         userRoleTable="user_roles" roleNameCol="role_name" /> 

            Valve组件：
                    Valve类似于过滤器，它可以工作于Engine和Host/Context之间、Host和Context之间以及Context和Web应用程序的资源之间，一个容器内可建立多个Valve，而且Valve定义的
                    次序也决定了它们生效的次序，Tomcat6中实现了多种不同的Valve;
                    AccesslogValve        ：访问日志Valve
                    ExtendedAccessValve   ：扩展功能的访问日志Valve
                    JDBCAccessLogValve    ：通过JDBC将访问日志信息发送到数据库中
                    RequestDumperValve    ：请求转储Valve
                    RemoteAddrValve       ：基于远程地址的访问控制
                    RemoteHostValve       ：基于远程主机名称的访问控制
                    SemaphoreValve        ：用于控制Tomcat主机上任何容器上的并发访问数量
                    JvmRouteBinderValve   ：在配置多个Tomcat为以Apache通过mod_proxy或mod_jk作为前端的集群架构中，当期望停止某节点时，可以通过此Valve将用记请求定向到备用节点
                                            使用此Valve，必须使用JvmRouteSessionIDBinderListener;
                    ReplicationValve      ：专用于Tomcat集群架构中，可以在某个请求的session信息发生更改时触发session数据在各节点间进行复制；
                    SingleSignOn          ：将两个或多个需要对用户进行认证webapp在认证用户时连接在一起，即一次认证即可访问所有连接在一起的webapp;
                    ClusterSingleSingOn   ：对SingleSignOn的扩展，专用于Tomcat集群当中，需要结合ClusterSingleSignOnListener进行工作  

                    RemoteHostValve和RemoteAddrValve可以分别用来实现基于主机名称和基于IP地址的访问控制，控制本身可以通过allow或deny来进行定义，这有点类似于Apache的访问控制
                    功能：如下面的Valve则实现了仅允许本机访问/probe
                      <Context path="/probe" docBase="probe">
                        <Valve className="org.apache.catalina.valves.RemoteAddrValve"
                         allow="127\.0\.0\.1"/>
                      </Context> 
                      
                    其中相关属性定义有：
                    1）className：相关的Java实现的类名，相应于分别应该为org.apache.catalina.valves.RemoteHostValve或org.apache.catalina.valves.RemoteAddrValve;   
                    2) allow    : 以逗号分开的允许访问的IP地址列表，支持正则 因此，点号"."用于IP地址时需要转义，仅定义allow项时，非明确的allow地址将被deny
                    3) deny     : 以逗号分开的拒绝访问的IP地址列表，支持正则 用法同上。                                     

            
            LNMT

                client  -->  nginx  -->  reverse_proxy  -->  http  -->  tomcat (http connector)

                location ~* \.(.jsp|do)$ {
                    proxy_pass http://web1.shui.com:8080;         #注意，这里不要加/线
                }

            LAMT
                client  -->  httpd  -->  reverse_proxy  -->  {http|jsp}  -->  tomcat {http connector|ajp connector}

                反代模块：
                    主： proxy_module
                    子： proxy_module_http, proxy_module_ajp

                    第三方模块：jk
                
                proxy_module_http:               
                 vim /etc/httpd/httpd.d/vihost
                  <VirtualHost *:80>
                      ServerName web1.shui.com
                      ProxyVia On            #反代时在报文里加个首部Via表示有没有开启反代 
                      ProxyRequests Off      #正向代理关闭（正向代理开了就要关掉反向代理，相同的反向开了正向要关） 
                      ProxyPreserveHost On   #要不要把客户请求报文的主机名一并转发给后台去
                      <Proxy *>
                      Require all granted
                      </Proxy>
                      ProxyPass /status !    #把httpd 的status页面反代至当前tomcat
                      ProxyPass / http://192.168.3.10:8080/
                      ProxyPassReverse / http://192.168.3.10:8080/
                      <Location />
                          Require all granted
                      </Location>
                  </VirtualHost> 

                proxy_module_ajp:
                   <VirtualHost *:80>
                      ServerName web1.shui.com
                      ProxyVia On            #反代时在报文里加个首部Via表示有没有开启反代 
                      ProxyRequests Off      #正向代理关闭（正向代理开了就要关掉反向代理，相同的反向开了正向要关） 
                      ProxyPreserveHost On   #要不要把客户请求报文的主机名一并转发给后台去
                      <Proxy *>
                          Require all granted
                      </Proxy>
                      ProxyPass /status !    #把httpd 的status页面反代至当前tomcat 
                      ProxyPass / ajp://192.168.3.10:8009/
                      ProxyPassReverse / ajp://192.168.3.10:8009/
                      <Location />
                          Require all granted
                      </Location>
                  </VirtualHost>                           

        回顾：
            部署：
                冷部署：
                热部署：manager app , ant , tcd



            Tomcat Cluster

                会话保持：
                    session sticky
                        source ip
                        cookie

                    session cluster:
                    
                    session server
                        kv server : memcached , redis  

                (1) LB tomcat
                    nginx tomcat
                    apache tomcat

                (2) LB tomcat cluster
                
                (3) LB tomcat 
                    session server (memcached)

                                



                
            安装tomcat
                需要安装JDK tomcat
                 从官网下载openjdk或者 oracle jdk 都行首先
                 # yum install jdk-8u25-linux-x64.rpm    (这里不是从base源里下载的，是我们之前下载好使用yum来安装的rpm包)

                    [root@localhost ~]# vim /etc/profile.d/java.sh           (安装好后使用环境变量定义下jdk的变量)
                     export Java_Home=/usr/java/latest
                     export PATH=$Java_Home/bin:$PATH

                     # tar xvf apache-tomcat-8.5.23.tar.gz -C /usr/local    （将tomcat的包解压至/usr/local目录下）

                     # ln -s apache-tomcat-8.5.23 tomcat                     (将tomcat创建个软连接)
                     
                    # vim /etc/profile.d/tomcat.sh                          （定义tomcat的环境变量）
                        export Tomcat_Home=/usr/local/tomcat
                        export PATH=$Tomcat_Home/bin:$PATH      

                手动添加一个测试应用程序：
                    1、创建webapp特有的目录结构
                        mkdir myapp/{lib,classes,WEB-INF,META-INF} -pv  
                               #如果有需求到开发，不要在conf/目录下更改context.xml 和 web.xml配置文件，因为一改动影响的是全局的                           可以把这两文件分别复制一份到之前创建的目录内cp context.xml META-INF  cp web.xml WEB-INF
                    2、提供webapp各文件
                       myapp/index.jsp 
                        <%@ page language="java" %>
                            <%@ page import="java.util.*" %>
                            <html>
                                <head>
                                    <title>JSP Test Page</title>
                                </head>
                                <body>
                                       <% out.println("Hello,word."); %>
                                </body>
                            </html>   
                    
                    3. 开放manager页面的访问
                        首先我们需要修改页面访问权限的设置。编辑webapps/manager/META-INF/context.xml    （这里的context.xml只控制单个的页面不是全局的）
                           <Context antiResourceLocking="false" privileged="true" >
                          <Valve className="org.apache.catalina.valves.RemoteAddrValve"
                             allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1"   --->将这里的allow地址改为你需要有权限访问的地址就行 （这里我就使用allow="^.*$" ，但生产环境千万别这么设）
                          <Manager sessionAttributeValueClassNameFilter="java\.lang\.(?:Boolean|Integer|Long|Number|String)|org\.apache\.catalina\.filters\.CsrfPreve
                          ntionFilter\$LruCache(?:\$1)?|java\.util\.(?:Linked)?HashMap"/>
                          </Context> 
                        
                        #当我们需要访问哪个管理页面的时候会有提示你需要进行哪里的操作，比如让你开放
                              <role rolename="manager-gui"/> 或 <role rolename="admin-gui"/> 
                              <user username="tomcat" password="centos" roles="manager-gui,manager-status"/>

                        然后我们授权用户 编辑 tomcat/conf/tomcat-users.xml
                          加上
                              <role rolename="manager-gui"/>
                              <role rolename="manager-status"/>
                              <user username="tomcat" password="centos" roles="manager-gui,manager-status"/>
                        
                        这两步做完后我们就可以访问manager和manager-status了
                


                    




































    会话保持：
        (1) seesion sticky    会话粘性，     是在调度器上实行的。

        (2) session cluster   会话调度

        (3) session server    会话服务器
            memcached(cache) , redis(store)

    Tomcat Cluster(session)        

memcached:
    缓存服务器：
        缓存：cache,无持久存储功能；
        bypass缓存，依赖于客户端的智能；
        k/v cache,仅支持存储可流式化数据；


